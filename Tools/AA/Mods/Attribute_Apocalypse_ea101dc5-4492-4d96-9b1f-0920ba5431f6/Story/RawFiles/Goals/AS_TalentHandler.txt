Version 1
SubGoalCombiner SGC_AND
INITSECTION
// IDs for Pet Pal assistants
DB_AS_PetPal(1,"AS_PetPal_Wolf_2e6ab764-5d49-41be-a9df-80763f510711");
DB_AS_PetPal(2,"AS_PetPal_Turtle_294e65b4-2e5d-47f0-b98d-4decd996529e");
DB_AS_PetPal(3,"AS_PetPal_Spider_eb7f2289-57af-4bbf-b21e-bdbd340af982");
DB_AS_PetPal(4,"AS_PetPal_Chicken_25edcc81-643e-4656-a0c0-920b9eaa1a54");
DB_AS_PetPal(5,"AS_PetPal_Boar_d957f4b3-585a-4271-865a-37127e310a2d");
DB_AS_PetPal(6,"AS_PetPal_Bear_deb90f68-a5f2-46c7-9472-1dd0f6d8ed98");
DB_AS_PetPal(7,"AS_PetPal_Condor_d6d8ee33-665c-4bb0-9905-7eccdd3d840b");
DB_AS_PetPal(8,"AS_PetPal_Crab_e8f9ecf9-5dad-4b46-a7b0-bf6788afdd25");
DB_AS_PetPal(9,"AS_PetPal_Croc_633e2eb5-8df2-42a8-9433-0f1786a1d095");
DB_AS_PetPal(10,"AS_PetPal_Cat_048064bf-c6ca-4576-9aa3-db82799881a7");

// Valid schools for academic
DB_AS_AcademicSchools("Air");
DB_AS_AcademicSchools("Death");
DB_AS_AcademicSchools("Necromancy");
DB_AS_AcademicSchools("Earth");
DB_AS_AcademicSchools("Fire");
DB_AS_AcademicSchools("Polymorph");
DB_AS_AcademicSchools("Ranger");
DB_AS_AcademicSchools("Rogue");
DB_AS_AcademicSchools("Summoning");
DB_AS_AcademicSchools("Warrior");
DB_AS_AcademicSchools("Water");

// Skills that should not proc academic ever
DB_AS_AcademicBlacklist("Shout_MS_Designate");
DB_AS_AcademicBlacklist("Shout_MS_Derive");
DB_AS_AcademicBlacklist("Target_AS_LightningStrike");
DB_AS_AcademicBlacklist("ProjectileStrike_AS_LightningBolt");

// Skills that should not proc Arrow Recovery's repeat
// DB_AS_ArrowRecovery_BL("Projectile_ArrowSpray");


KBSECTION
// Alpha Strike, applied to All Skilled Up
/*
IF
ObjectEnteredCombat((CHARACTERGUID)_Char,_)
AND
CharacterHasTalent(_Char,"ExtraSkillPoints",1)
THEN
ApplyStatus(_Char,"AS_RESETCD",-1.0,1);
*/

IF
CharacterReceivedDamage(_Def,_Dmg,(CHARACTERGUID)_Char)
AND
CharacterIsEnemy(_Def,_Char,1)
AND
_Dmg >= 1
AND
ObjectGetFlag(_Char,"AS_IsTurn",1)
AND
CharacterIsInCombat(_Char,1)
AND
ObjectGetFlag(_Char,"AS_PetPalCooldown",0)
AND
CharacterGetLevel(_Char,_Level)
AND
CharacterHasTalent(_Char,"AnimalEmpathy",1)
AND
ObjectGetFlag(_Char,"AS_PetPal_Off",0)
AND
Random(100,_Chance)
AND
_Chance > 94
AND
Random(10,_Rand)
AND
DB_AS_PetPal(_Rand,_Char2)
AND
GetPosition(_Def,_X,_Y,_Z)
AND
TemporaryCharacterCreateOutOfSightToObject(_Char2,_Char,_Char,0,"",_Pet)
//TemporaryCharacterCreateAtPosition(_X,_Y,_Z,_Char2,0,_Pet)
THEN
CharacterMoveTo(_Pet,_Def,1,"",1);
CharacterSetTemporaryHostileRelation(_Def,_Pet);
CharacterLevelUpTo(_Pet,_Level);
ObjectSetFlag(_Pet,"AS_PetPalPet");
ObjectSetFlag(_Char,"AS_PetPalCooldown");
ProcObjectTimer(_Char,"AS_RemovePetPalCooldown",1000);
PlayEffect(_Pet,"RS3_FX_GP_ScriptedEvent_Teleport_GenericSmoke_01","root");
SetVarInteger(_Pet,"AS_PetPal_TurnsLeft",5);
DB_AS_PetPalManage(_Char,_Pet);


// Repeat for summons
IF
CharacterReceivedDamage(_Def,_Dmg,(CHARACTERGUID)_Summ)
AND
CharacterIsSummon(_Summ,1)
AND
CharacterIsPlayer(_Summ, 1) // Totems shouldn't spawn pets
AND
CharacterGetOwner(_Summ,(CHARACTERGUID)_Char)
AND
CharacterIsEnemy(_Def,_Char,1)
AND
_Dmg >= 1
AND
ObjectGetFlag(_Summ,"AS_IsTurn",1)
AND
CharacterIsInCombat(_Summ,1)
AND
ObjectGetFlag(_Summ,"AS_PetPalCooldown",0)
AND
CharacterGetLevel(_Char,_Level)
AND
CharacterHasTalent(_Char,"AnimalEmpathy",1)
AND
ObjectGetFlag(_Char,"AS_PetPal_Off",0)
AND
Random(100,_Chance)
AND
_Chance > 95
AND
Random(10,_Rand)
AND
DB_AS_PetPal(_Rand,_Char2)
AND
GetPosition(_Def,_X,_Y,_Z)
AND
TemporaryCharacterCreateOutOfSightToObject(_Char2,_Summ,_Summ,0,"",_Pet)
//TemporaryCharacterCreateAtPosition(_X,_Y,_Z,_Char2,0,_Pet)
THEN
CharacterMoveTo(_Pet,_Def,1,"",1);
CharacterSetTemporaryHostileRelation(_Def,_Pet);
CharacterLevelUpTo(_Pet,_Level);
ObjectSetFlag(_Pet,"AS_PetPalPet");
ObjectSetFlag(_Summ,"AS_PetPalCooldown");
ProcObjectTimer(_Summ,"AS_RemovePetPalCooldown",1000);
PlayEffect(_Pet,"RS3_FX_GP_ScriptedEvent_Teleport_GenericSmoke_01","root");
SetVarInteger(_Pet,"AS_PetPal_TurnsLeft",5);
DB_AS_PetPalManage(_Char,_Pet);


IF
ObjectTurnStarted((CHARACTERGUID)_Char)
AND
IsTagged(_Char,"AS_PETPAL",1)
AND
GetVarInteger(_Char,"AS_PetPal_TurnsLeft",_Val)
AND NOT
_Val > 0
AND
DB_AS_PetPalManage(_Owner,_Char)
THEN
NOT DB_AS_PetPalManage(_Owner,_Char);
SetStoryEvent(_Char,"AS_PetPalDisappear");


IF
ObjectTurnStarted((CHARACTERGUID)_Char)
AND
IsTagged(_Char,"AS_PETPAL",1)
AND
GetVarInteger(_Char,"AS_PetPal_TurnsLeft",_Val)
AND
IntegerSubtract(_Val,1,_Out)
THEN
SetVarInteger(_Char,"AS_PetPal_TurnsLeft",_Out);

IF
CharacterLeveledUp(_Char)
AND
CharacterGetLevel(_Char,_Val)
AND
IsTagged(_Char,"AS_PETPAL",1)
AND
CharacterGetEquippedWeapon(_Char,(ITEMGUID)_Item)
THEN
ItemLevelUpTo(_Item,_Val);

IF
ObjectLeftCombat((CHARACTERGUID)_Pet,_)
AND
DB_AS_PetPalManage(_Char,_Pet)
THEN
SetStoryEvent(_Pet,"AS_PetPalDisappear");
NOT DB_AS_PetPalManage(_Char,_Pet);

PROC
ProcObjectTimerFinished(_Char,"AS_RemovePetPalCooldown")
THEN
ObjectClearFlag(_Char,"AS_PetPalCooldown");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char,"AS_RemovePetPalCooldown")
AND
DB_AS_PetPalManage(_Char,_Pet)
AND
CharacterGetLevel(_Char,_Lvl)
THEN
CharacterLevelUpTo(_Pet,_Lvl);

IF
ObjectLeftCombat((CHARACTERGUID)_Char,_)
AND
ObjectGetFlag(_Char,"AS_PetPalPet",1)
THEN
SetStoryEvent(_Char,"AS_PetPalDisappear");

IF
StoryEvent((CHARACTERGUID)_Char,"AS_PetPalDisappear")
THEN
LeaveCombat(_Char);
CharacterSetImmortal(_Char,1);
CharacterFleeOutOfSight(_Char,"AS_KillOffPet");


IF
StoryEvent((CHARACTERGUID)_Char,"AS_KillOffPet")
AND
GetPosition(_Char,_X,_Y,_Z)
THEN
PlayEffectAtPosition("RS3_FX_GP_ScriptedEvent_Teleport_GenericSmoke_01",_X,_Y,_Z);
CharacterSetImmortal(_Char,0);
SetVisible(_Char,0);
SetOnStage(_Char,0);
ProcObjectTimer(_Char,"AS_KillOffClone",5000);

// Pet Pal Toggle skills
IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"AnimalEmpathy",1)
AND
CharacterHasSkill(_Char,"Shout_AS_PetpalOff",0)
AND
CharacterHasSkill(_Char,"Shout_AS_PetpalOn",0)
THEN
ObjectClearFlag(_Char,"AS_PetPal_Off");
CharacterRemoveSkill(_Char,"Shout_AS_PetpalOn");
CharacterAddSkill(_Char,"Shout_AS_PetpalOff",0);

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"AnimalEmpathy",1)
AND
CharacterHasSkill(_Char,"Shout_AS_PetpalOn",0)
AND
ObjectGetFlag(_Char,"AS_PetPal_Off",1)
AND
ObjectGetFlag(_Char,"AS_PetPal_Cooldown",0)
THEN
CharacterRemoveSkill(_Char,"Shout_AS_PetpalOff");
CharacterAddSkill(_Char,"Shout_AS_PetpalOn",0);


IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"AnimalEmpathy",0)
THEN
CharacterRemoveSkill(_Char,"Shout_AS_PetpalOff");
CharacterRemoveSkill(_Char,"Shout_AS_PetpalOn");

IF
CharacterStatusApplied(_Char,"AS_PETPALON",_)
THEN
ObjectClearFlag(_Char,"AS_PetPal_Off");
CharacterRemoveSkill(_Char,"Shout_AS_PetpalOn");
CharacterAddSkill(_Char,"Shout_AS_PetpalOff",0);


IF
CharacterStatusApplied(_Char,"AS_PETPALOFF",_)
THEN
ObjectSetFlag(_Char,"AS_PetPal_Off");
CharacterRemoveSkill(_Char,"Shout_AS_PetpalOff");
CharacterAddSkill(_Char,"Shout_AS_PetpalOn",0);

















// Academic
IF
ObjectEnteredCombat(_Char,_)
THEN
SetVarInteger(_Char,"AS_AcademicStacks",0);

IF
ObjectEnteredCombat((CHARACTERGUID)_Char,_)
AND
DB_AS_AcademicCast(_Char,_Element)
THEN
NOT DB_AS_AcademicCast(_Char,_Element);

// Second case - prior element set up
IF
CharacterUsedSkill(_Char,_Skill,_,_Element)
AND
DB_AS_AcademicSchools(_Element)
AND
NOT DB_AS_AcademicBlacklist(_Skill)
AND
CharacterHasTalent(_Char,"ExtraSkillPoints",1)
AND
GetVarInteger(_Char,"AS_AcademicStacks",_Val)
AND
IntegerSum(_Val,1,_New)
AND
CharacterHasSkill(_Char,_Skill,1)
AND
DB_AS_AcademicCast(_Char,_Element)
THEN
SetVarInteger(_Char,"AS_AcademicStacks",_New);
SetStoryEvent(_Char,"AS_CheckAcademic");

// First case - no prior skill element set up
IF
CharacterUsedSkill(_Char,_Skill,_,_Element)
AND
DB_AS_AcademicSchools(_Element)
AND
NOT DB_AS_AcademicBlacklist(_Skill)
AND
CharacterHasTalent(_Char,"ExtraSkillPoints",1)
AND
GetVarInteger(_Char,"AS_AcademicStacks",_Val)
AND
CharacterHasSkill(_Char,_Skill,1)
AND
NOT DB_AS_AcademicCast(_Char,_Element)
THEN
DB_AS_AcademicCast(_Char,_Element);
SetVarInteger(_Char,"AS_AcademicStacks",1);
SetStoryEvent(_Char,"AS_CheckAcademic");

// Third case - skill of incorrect element
IF
CharacterUsedSkill(_Char,_Skill,_,_Element)
AND
DB_AS_AcademicSchools(_Element)
AND
NOT DB_AS_AcademicBlacklist(_Skill)
AND
CharacterHasTalent(_Char,"ExtraSkillPoints",1)
AND
GetVarInteger(_Char,"AS_AcademicStacks",_Val)
AND
CharacterHasSkill(_Char,_Skill,1)
AND
NOT DB_AS_AcademicCast(_Char,_Element)
AND
DB_AS_AcademicCast(_Char,_AnotherElement)
THEN
NOT DB_AS_AcademicCast(_Char,_AnotherElement);
DB_AS_AcademicCast(_Char,_Element);
SetVarInteger(_Char,"AS_AcademicStacks",1);
SetStoryEvent(_Char,"AS_CheckAcademic");


// Check event
IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAcademic")
AND
GetVarInteger(_Char,"AS_AcademicStacks",_Val)
AND
_Val >= 3
AND
DB_AS_AcademicCast(_Char,_Element)
THEN
NOT DB_AS_AcademicCast(_Char,_Element);
SetVarInteger(_Char,"AS_AcademicStacks",0);
CharacterAddActionPoints(_Char,1);
PlayEffect(_Char,"AS_Inspired","Dummy_StatusFX");

/*
IF
GameBookInterfaceClosed(_Item,_Char)
AND
CharacterIsInCombat(_Char,1)
AND
CharacterHasTalent(_Char,"ExtraSkillPoints",1)
//AND
//IsTagged(_Item,"BOOK",1)
THEN
CharacterAddActionPoints(_Char,-1);
ApplyStatus(_Char,"AS_BOOKBOOST",-1.0,1);

IF
CharacterReceivedDamage(_Char,_Perct,(CHARACTERGUID)_Causee)
AND
CharacterHasTalent(_Causee,"ExtraSkillPoints",1)
THEN
ProcObjectTimer(_Causee,"AS_RemoveBookBoost",1600);

PROC
ProcObjectTimerFinished(_Char,"AS_RemoveBookBoost")
THEN
RemoveStatus(_Char,"AS_BOOKBOOST");

IF
ObjectTurnEnded(_Char)
THEN
RemoveStatus(_Char,"AS_BOOKBOOST");

IF
ObjectLeftCombat(_Char,_)
THEN
RemoveStatus(_Char,"AS_BOOKBOOST");
*/

/*
IF
CharacterUsedItem(_Char,_Item)
AND
String((GUIDSTRING)_Item,_Name)
AND
GetTemplate(_Item,_Template)
THEN
CharacterStatusText(_Char,_Name);
CharacterStatusText(_Char,_Template);
*/
/*
PROC
ProcBlockUseOfItem(_Char,_Item)
AND
CharacterHasTalent(_Char,"ExtraSkillPoints",1)
AND
String((GUIDSTRING)_Item,_Name)
AND
StringContains(_Name,"BOOK_Skill",1)
THEN
DB_CustomUseItemResponse(_Char,(ITEMGUID)_Item, 0);
*/

// OLD CODE
/*
IF
CharacterUsedItem(_Char,_Item)
AND
CharacterHasTalent(_Char,"ExtraSkillPoints",1)
AND
String((GUIDSTRING)_Item,_Name)
AND
StringContains(_Name,"BOOK_Skill",1)
AND
GetTemplate((GUIDSTRING)_Item,_Template)
AND
GetPosition(_Char,_X,_Y,_Z)
THEN
DB_AS_AcademicItem(_Char,_Template);
ProcObjectTimer(_Char,"AS_AcademicRefundBook",50);

IF
CharacterLearnedSkill(_Char,_Skill)
THEN
ObjectSetFlag(_Char,"AS_LearnedSkill_Academic");
ProcObjectTimer(_Char,"AS_LearnedSkill_DebriefTimer",55);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char,"AS_AcademicRefundBook")
AND
ObjectGetFlag(_Char,"AS_LearnedSkill_Academic",1)
AND
DB_AS_AcademicItem(_Char,_Template)
AND
GetPosition(_Char,_X,_Y,_Z)
AND
CreateItemTemplateAtPosition(_Template,_X,_Y,_Z,_Item)
THEN
NOT DB_AS_AcademicItem(_Char,_Template);
ItemToInventory(_Item,_Char,1,1,1);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char,"AS_AcademicRefundBook")
AND
DB_AS_AcademicItem(_Char,_Template)
THEN
NOT DB_AS_AcademicItem(_Char,_Template);

PROC
ProcObjectTimerFinished(_Char,"AS_LearnedSkill_DebriefTimer")
THEN
ObjectClearFlag(_Char,"AS_LearnedSkill_Academic");
*/

// This runs before the book is actually used
PROC
ProcProcessUseOfItem((CHARACTERGUID)_Char, (ITEMGUID)_Item, (INTEGER)_RequestID)
AND
// If the item usage isn't blocked, continue
NOT DB_CustomUseItemResponse(_Char,_Item, 0)
AND
CharacterHasTalent(_Char, "ExtraSkillPoints", 1)
AND
GetTemplate(_Item, _Template)
AND
StringContains(_Template,"BOOK_Skill",1)
AND
StringContains(_Template, "BOOK_Skill_AbilityPoints", 0)
AND
ItemGetAmount(_Item, _Amount)
THEN
DB_AS_AcademicItem(_Char, _Item, _Template, _Amount);

// This fires after the item was used, even if it no longer "exists" in an inventory
IF
CharacterStoppedUsingItem(_Char, _Item)
AND
DB_AS_AcademicItem(_Char, _Item, _Template, _Amount)
AND
ItemGetAmount(_Item, _CurrentAmount)
AND
_CurrentAmount < _Amount
THEN
NOT DB_AS_AcademicItem(_Char, _Item, _Template, _Amount);
ItemTemplateAddTo(_Template, _Char, 1, 0);
CharacterStatusText(_Char, "<font color='#AAFF00'>Book preserved by academic insight!</font>");
PlayEffect(_Char,"AS_Inspired","Dummy_StatusFX");

// Skillbook wasn't consumed, clear entry
IF
CharacterStoppedUsingItem(_Char, _Item)
AND
DB_AS_AcademicItem(_Char, _Item, _Template, _Amount)
THEN
NOT DB_AS_AcademicItem(_Char, _Item, _Template, _Amount);

// Arrow Recovery
/*
IF
CharacterUsedSkillOnTarget(_Char,_Target,_Skill,"projectile",_)
AND
ObjectGetFlag(_Char,"AS_ArrowBlacklist",0)
AND
CharacterHasTalent(_Char,"RangerLoreArrowRecover",1)
AND
StringContains(_Skill,"Arrow",1)
AND
NOT DB_AS_ArrowRecovery_BL(_Skill)
AND
Random(100,_Rand)
AND
_Rand > 33
THEN
ObjectSetFlag(_Char,"AS_ArrowBlacklist");
CharacterStatusText(_Char,"Arrow Efficiency");
//CharacterAddActionPoints(_Char,2);
ProcObjectTimer(_Char,"AS_ArrowRepeat",1900);
DB_AS_ArrowRepeatTarget(_Char,_Skill,_Target);
PlayEffect(_Char,"AS_ArrowRecovery","root");
ProcObjectTimer(_Char,"AS_ClearArrowBlacklist",3800);

IF
CharacterUsedSkillAtPosition(_Char,_X,_Y,_Z,_Skill,"projectile",_)
AND
ObjectGetFlag(_Char,"AS_ArrowBlacklist",0)
AND
CharacterHasTalent(_Char,"RangerLoreArrowRecover",1)
AND
StringContains(_Skill,"Arrow",1)
AND
NOT DB_AS_ArrowRecovery_BL(_Skill)
AND
Random(100,_Rand)
AND
_Rand > 33
THEN
ObjectSetFlag(_Char,"AS_ArrowBlacklist");
CharacterStatusText(_Char,"Arrow repeating");
DB_AS_ArrowRepeatLocation(_Char,_Skill,_X,_Y,_Z);
ProcObjectTimer(_Char,"AS_ArrowRepeat",1900);
//CharacterAddActionPoints(_Char,2);
PlayEffect(_Char,"AS_ArrowRecovery","root");
ProcObjectTimer(_Char,"AS_ClearArrowBlacklist",3800);


PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char,"AS_ClearArrowBlacklist")
THEN
ObjectClearFlag(_Char,"AS_ArrowBlacklist");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char,"AS_ArrowRepeat")
AND
DB_AS_ArrowRepeatLocation(_Char,_Skill,_X,_Y,_Z)
THEN
CharacterUseSkillAtPosition(_Char,_Skill,_X,_Y,_Z,1,1);
NOT DB_AS_ArrowRepeatLocation(_Char,_Skill,_X,_Y,_Z);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char,"AS_ArrowRepeat")
AND
DB_AS_ArrowRepeatTarget(_Char,_Skill,_Target)
THEN
CharacterUseSkill(_Char,_Skill,_Target,1,1,1);
NOT DB_AS_ArrowRepeatTarget(_Char,_Skill,_Target);
*/

// (Drunken) Brawler
/*
IF
CharacterStatusApplied(_Char,"DRUNK",_)
AND
CharacterHasTalent(_Char,"Escapist",1)
THEN
ApplyStatus(_Char,"AS_DRUNKBOOST",-1.0,1);

IF
CharacterStatusRemoved(_Char,"DRUNK",_)
THEN
RemoveStatus(_Char,"AS_DRUNKBOOST");
*/

// Braveheart
/*
IF
ObjectTurnStarted((CHARACTERGUID)_Char)
THEN
ApplyStatus(_Char,"AS_BRAVEHEART_CHECK",0.0);

IF
CharacterStatusApplied(_Char,"AS_BRAVEHEART_PROC",(CHARACTERGUID)_Causee)
AND
CharacterIsPlayer(_Char,1)
AND
IsTagged(_Char,"AI_PREFERRED_TARGET",0)
THEN
SetTag(_Char,"AI_PREFERRED_TARGET");
DB_AS_BraveheartedBy(_Char,_Causee);

IF
ObjectTurnEnded((CHARACTERGUID)_Causee)
AND
DB_AS_BraveheartedBy(_Char,_Causee)
THEN
ClearTag(_Char,"AI_PREFERRED_TARGET");
NOT DB_AS_BraveheartedBy(_Char,_Causee);
*/

IF
ObjectEnteredCombat((CHARACTERGUID)_Char,_)
AND
CharacterHasTalent(_Char,"Escapist",1)
THEN
CharacterEnableWaypointUsage(_Char,0);

IF
ObjectLeftCombat((CHARACTERGUID)_Char,_)
AND
HasActiveStatus(_Char,"FUGITIVE",0)
AND
CharacterHasTalent(_Char,"Escapist",1)
THEN
CharacterEnableWaypointUsage(_Char,1);


IF
CharacterStatusRemoved((CHARACTERGUID)_Char,"FUGITIVE",_)
AND
CharacterHasTalent(_Char,"Escapist",1)
THEN
CharacterEnableWaypointUsage(_Char,1);

IF
CharacterStartAttackObject((CHARACTERGUID)_Defender,_,_Attacker)
AND
ObjectGetFlag(_Defender,"AS_IsTurn",1)
AND
CharacterHasTalent(_Defender,"Escapist",1)
AND
HasActiveStatus(_Defender,"DISARMED",0)
AND
HasActiveStatus(_Defender,"CHICKEN",0)
AND
NOT DB_AS_BrawlerBlack(_Attacker)
AND
NOT DB_AS_BrawlerBlack(_Defender)
THEN
SetStoryEvent(_Defender,"AS_GetOldAP");
DB_AS_BrawlerAttack(_Defender,_Attacker);
DB_AS_BrawlerBlack(_Attacker);
ProcObjectTimer(_Defender,"AS_DoBrawlerAttack",2);
ProcObjectTimer(_Attacker,"AS_ClearBrawlerBlacklist",200);
ObjectSetFlag(_Defender,"AS_BrawlerAttack");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Attacker,"AS_ClearBrawlerBlacklist")
THEN
NOT DB_AS_BrawlerBlack(_Attacker);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Defender,"AS_DoBrawlerAttack")
AND
DB_AS_BrawlerAttack(_Defender,_Attacker)
THEN
CharacterAttack(_Defender,_Attacker);
ObjectSetFlag(_Defender,"AS_IsBrawlerAttacking");
NOT DB_AS_BrawlerAttack(_Defender,_Attacker);

IF
CharacterStartAttackObject(_,_,_Attacker)
AND
ObjectGetFlag(_Attacker,"AS_BrawlerAttack",1)
THEN
SetStoryEvent(_Attacker,"AS_RestoreAP");
ObjectClearFlag(_Attacker,"AS_BrawlerAttack");

IF
CharacterStartAttackObject(_,_,_Attacker)
AND
ObjectGetFlag(_Attacker,"AS_GotEmergencyAP",1)
THEN
SetStoryEvent(_Attacker,"AS_RestoreAP");
ObjectClearFlag(_Attacker,"AS_GotEmergencyAP");

IF
StoryEvent((CHARACTERGUID)_Defender,"AS_RestoreAP")
THEN
SetStoryEvent(_Defender,"AS_GetNewAP");

// Restore Action Point difference. 2AP would normally be enough but sometimes attacks of opportunity provoke movement, which could cause frustration.
IF
StoryEvent((CHARACTERGUID)_Defender,"AS_DoRestoreAP")
AND
GetVarInteger(_Defender,"AS_OldAP",_Old)
AND
GetVarInteger(_Defender,"AS_NewAP",_New)
AND
IntegerSubtract(_Old,_New,_Diff)
THEN
CharacterAddActionPoints(_Defender,_Diff);
ObjectClearFlag(_Defender,"AS_IsBrawlerAttacking");

// Demon

IF
ObjectEnteredCombat((CHARACTERGUID)_Char,_)
AND
CharacterHasTalent(_Char,"Demon",1)
THEN
SetVarInteger(_Char,"AS_DemonStacks",0);

IF
ObjectLeftCombat((CHARACTERGUID)_Char,_)
AND
CharacterHasTalent(_Char,"Demon",1)
THEN
SetVarInteger(_Char,"AS_DemonStacks",0);
ApplyStatus(_Char,"AS_GEO_REMOVESHELL",0.0);

IF
CharacterUsedSkill(_Char,_,_,"Fire")
AND
CharacterIsInCombat(_Char,1)
AND
CharacterHasTalent(_Char,"Demon",1)
AND
GetVarInteger(_Char,"AS_DemonStacks",_Stacks)
AND
IntegerSum(_Stacks,1,_NewStacks)
AND
IntegerMin(_NewStacks,20,_Min)
AND
IntegertoString(_Min,_Str1)
AND
StringConcatenate("AS_GEO_EARTHENSTACK",_Str1,_Out)
THEN
ApplyStatus(_Char,_Out,-1.0);
SetVarInteger(_Char,"AS_DemonStacks",_Min);

// Egalitarian, applied to Bigger and Better

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"ExtraStatPoints",1)
AND
HasActiveStatus(_Char,"AS_EGALAURA",0)
THEN
ApplyStatus(_Char,"AS_EGALAURA",-1.0,1);

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"ExtraStatPoints",0)
AND
HasActiveStatus(_Char,"AS_EGALAURA",1)
THEN
RemoveStatus(_Char,"AS_EGALAURA");

IF
CharacterStatusApplied(_Char,"AS_EGAL",(CHARACTERGUID)_Causee)
AND
NOT DB_AS_EgalAffecting(_Causee,_Char)
THEN
DB_AS_EgalAffecting(_Causee,_Char);

IF
CharacterStatusApplied(_Char,_Any,_)
AND
CharacterHasTalent(_Char,"ExtraStatPoints",1)
AND
NOT DB_AS_EgalitarianBlacklist(_Char,_Any)
AND
GetStatusTurns(_Char,_Any,_Turns)
AND
_Turns > 0
AND
IntegerProduct(_Turns,6,_Out)
AND
Real(_Out,_Dur)
AND
DB_AS_EgalAffecting(_Char,_Subject)
AND
GetDistanceTo(_Char,_Subject,_Dist)
AND
_Dist <= 3.0
THEN
PlayEffect(_Char,"AS_Egalitarian");
DB_AS_EgalitarianBlacklist(_Char,_Any);
ProcObjectTimer(_Char,"AS_ClearEgalSharing",10); // Clears the Sharing Status DB after a timer as well
ProcObjectTimer(_Char,"AS_ClearEgalBlacklist",10);
ApplyStatus(_Subject,_Any,_Dur);
//CharacterStatusText(_Char,"<font color='#E0FFF0'>Egalitarian</font>");


IF
CharacterStatusApplied(_Char,_Any,_)
AND
DB_AS_EgalAffecting(_Causee,_Char)
AND
GetDistanceTo(_Causee,_Char,_Dist)
AND
_Dist >= 3.0
THEN
NOT DB_AS_EgalAffecting(_Causee,_Char);


IF
CharacterStatusRemoved(_Char,_Any,_)
AND
DB_AS_EgalAffecting(_Causee,_Char)
AND
GetDistanceTo(_Causee,_Char,_Dist)
AND
_Dist >= 3.0
THEN
NOT DB_AS_EgalAffecting(_Causee,_Char);


// Clear that temp blacklist
PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char,"AS_ClearEgalBlacklist")
AND
DB_AS_EgalitarianBlacklist(_Char,_Any)
THEN
NOT DB_AS_EgalitarianBlacklist(_Char,_Any);



// Far Out Man
IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"FaroutDude",1)
AND
HasActiveStatus(_Char,"AS_FAROUT",0)
THEN
ApplyStatus(_Char,"AS_FAROUT",-1.0,1);

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"FaroutDude",0)
AND
HasActiveStatus(_Char,"AS_FAROUT",1)
THEN
RemoveStatus(_Char,"AS_FAROUT");
RemoveStatus(_Char,"AS_CLAUSTRO");

IF
CharacterStatusApplied(_Char,"AS_FAROUTSNIFF",(CHARACTERGUID)_Causee)
AND
CharacterIsInCombat(_Causee,1)
THEN
DB_AS_FarOutConnect(_Causee,_Char);
SetStoryEvent(_Causee,"AS_CheckFarOut");

IF
CharacterStatusRemoved(_Char,"AS_FAROUTSNIFF",_)
AND
DB_AS_FarOutConnect(_Causee,_Char)
AND
GetDistanceTo(_Char,_Causee,_Dist)
AND
_Dist > 4.0
THEN
NOT DB_AS_FarOutConnect(_Causee,_Char);
SetStoryEvent(_Causee,"AS_CheckFarOut");

IF
CharacterStatusRemoved(_Char,"AS_FAROUTSNIFF",_)
AND
DB_AS_FarOutConnect(_Causee,_Char)
AND
CharacterIsDead(_Char,1)
THEN
NOT DB_AS_FarOutConnect(_Causee,_Char);
SetStoryEvent(_Causee,"AS_CheckFarOut");

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckFarOut")
AND
CharacterIsInCombat(_Char,1)
AND
DB_AS_FarOutConnect(_Char,_)
AND
HasActiveStatus(_Char,"AS_CLAUSTRO",0)
THEN
ApplyStatus(_Char,"AS_CLAUSTRO",-1.0);

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckFarOut")
AND
NOT DB_AS_FarOutConnect(_Char,_)
THEN
RemoveStatus(_Char,"AS_CLAUSTRO");

IF
ObjectLeftCombat((CHARACTERGUID)_Char,_)
AND
DB_AS_FarOutConnect(_Char,_Anyone)
THEN
NOT DB_AS_FarOutConnect(_Char,_Anyone);
RemoveStatus(_Char,"AS_CLAUSTRO");

// Hothead
/*
IF
CharacterUsedSkill((CHARACTERGUID)_Char,_,_,_)
AND
CharacterIsInCombat(_Char,1)
AND
CharacterHasTalent(_Char,"Perfectionist",1)
THEN
SetStoryEvent(_Char,"AS_GetHpHothead");

IF
CharacterStartAttackObject(_,_,_Char)
AND
CharacterIsInCombat(_Char,1)
AND
CharacterHasTalent(_Char,"Perfectionist",1)
THEN
SetStoryEvent(_Char,"AS_GetHpHothead");


IF
StoryEvent((CHARACTERGUID)_Char,"AS_HotheadTakeDamage")
AND
GetVarInteger(_Char,"AS_CurrentHP",_Val)
AND
IntegerProduct(_Val,5,_Big)
AND
IntegerDivide(_Big,100,_Perct)
THEN
ApplyDamage(_Char,_Perct,"Piercing");


IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"Perfectionist",1)
AND
HasActiveStatus(_Char,"AS_HOTHEAD",0)
THEN
ApplyStatus(_Char,"AS_HOTHEAD",-1.0,1);
*/

// Ice King

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"IceKing",1)
AND
HasActiveStatus(_Char,"AS_ICEKING",0)
THEN
ApplyStatus(_Char,"AS_ICEKING",-1.0,1);

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"IceKing",0)
AND
HasActiveStatus(_Char,"AS_ICEKING",1)
THEN
RemoveStatus(_Char,"AS_ICEKING");

// Leech

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"Leech",1)
AND
NOT DB_AS_Sanguinary(_Char)
THEN
DB_AS_Sanguinary(_Char);

IF
StoryEvent((CHARACTERGUID)_Char,"AS_CheckAttributes")
AND
CharacterHasTalent(_Char,"Leech",0)
AND
DB_AS_Sanguinary(_Char)
THEN
NOT DB_AS_Sanguinary(_Char);

IF
CharacterDied(_Char)
AND
IsTagged(_Char,"TOTEM",0)
AND
DB_AS_Sanguinary(_Anybody)
AND
GetDistanceTo(_Char,_Anybody,_Dist)
AND
_Dist <= 13.0
AND
HasActiveStatus(_Anybody,"AS_BLACKHEART",0)
THEN
ApplyStatus(_Anybody,"AS_BloodthirstyHeal",0.0,1,_Anybody);

IF
CharacterDied(_Char)
AND
IsTagged(_Char,"TOTEM",0)
AND
DB_AS_Sanguinary(_Anybody)
AND
GetDistanceTo(_Char,_Anybody,_Dist)
AND
_Dist <= 13.0
AND
HasActiveStatus(_Anybody,"AS_BLACKHEART",1)
AND
CharacterGetHitpointsPercentage(_Char,_Perct)
AND
RealSum(_Perct,7.0,_Out)
AND
RealMin(100.0,_Out,_Res)
THEN
CharacterSetHitpointsPercentage(_Char,_Res);
CharacterStatusText(_Char,"<font color='#91f4f6'>Leech</font>");


// Morning Person
IF
ObjectEnteredCombat((CHARACTERGUID)_Char,_)
AND
CharacterHasTalent(_Char,"ResurrectToFullHealth",1)
AND
HasActiveStatus(_Char,"SNEAKING",0)
AND
HasActiveStatus(_Char,"INVISIBLE",0)
THEN
CharacterUseSkill(_Char,"Shout_AS_MorningPerson",_Char,1,1,0);


// Parry Master

IF
CharacterMissedBy(_Char,_,_Attacker)
AND
CharacterHasTalent(_Char,"DualWieldingDodging",1)
AND
GetDistanceTo(_Char,_Attacker,_Dist)
AND
HasActiveStatus(_Char,"CHICKEN",0)
AND
HasActiveStatus(_Char,"DISARMED",0)
AND
CharacterIsIncapacitated(_Char,0)
AND
_Dist <= 3.0
AND
NOT DB_AS_BrawlerBlack(_Attacker)
THEN
SetStoryEvent(_Char,"AS_GetOldAP");
DB_AS_BrawlerAttack(_Char,_Attacker);
DB_AS_BrawlerBlack(_Attacker);
ProcObjectTimer(_Char,"AS_DoBrawlerAttack",2);
ProcObjectTimer(_Attacker,"AS_ClearBrawlerBlacklist",200);
ObjectSetFlag(_Char,"AS_BrawlerAttack");



IF
AttackedByObject(_,_,(CHARACTERGUID)_Char,_,_)
AND
ObjectGetFlag(_Char,"AS_IsParryAttacking",1)
AND
ObjectGetFlag(_Char,"AS_IsTurn",1)
THEN
CharacterAddActionPoints(_Char,2);

IF
AttackedByObject(_,_,(CHARACTERGUID)_Char,_,_)
THEN
ObjectClearFlag(_Char,"AS_IsParryAttacking");

// Pet Pal
IF
ObjectLeftCombat((CHARACTERGUID)_Char,_)
AND
IsTagged(_Char,"AS_PETPAL",1)
THEN
//SetVisible(_Char,0);
CharacterFleeOutOfSight(_Char,"AS_KillOffPet");
ProcObjectTimer(_Char,"AS_SetOffStage",4000);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char,"AS_SetOffStage")
THEN
SetOnStage(_Char,0);
ProcObjectTimer(_Char,"AS_KillOff",500);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Char,"AS_KillOff")
THEN
CharacterDieImmediate(_Char,0,"None");

// Ambidextrous' item swap effect
IF
ItemEquipped(_Any,(CHARACTERGUID)_Char)
AND
CharacterHasTalent(_Char,"Ambidextrous",1)
AND
CharacterIsInCombat(_Char,1)
AND
ObjectGetFlag(_Char,"AS_Weaponmeister_Blacklist",0)
THEN
CharacterAddActionPoints(_Char,1);
ObjectSetFlag(_Char,"AS_Weaponmeister_Blacklist");

IF
ObjectTurnEnded(_Char)
THEN
ObjectClearFlag(_Char,"AS_Weaponmeister_Blacklist");








// Guerilla (just here because it's longer)
IF
CharacterStatusApplied(_Char,"SNEAKING",_)
THEN
ProcObjectTimerCancel(_Char,"AS_CancelSneakBenefit");
ProcObjectTimer(_Char,"AS_CheckSneakAbuse",500);

IF
CharacterStatusApplied(_Char,"INVISIBLE",_)
THEN
ProcObjectTimerCancel(_Char,"AS_CancelSneakBenefit");
ProcObjectTimer(_Char,"AS_CheckSneakAbuse",500);

PROC
ProcObjectTimerFinished(_Char,"AS_CheckSneakAbuse")
AND
HasActiveStatus(_Char,"SNEAKING",1)
THEN
ObjectSetFlag(_Char,"AS_CanBenefitFromSneak");

PROC
ProcObjectTimerFinished(_Char,"AS_CheckSneakAbuse")
AND
HasActiveStatus(_Char,"INVISIBLE",1)
THEN
ObjectSetFlag(_Char,"AS_CanBenefitFromSneak");

IF
CharacterStatusRemoved(_Char,"SNEAKING",_)
THEN
ProcObjectTimerCancel(_Char,"AS_CheckSneakAbuse");
ProcObjectTimerCancel(_Char,"AS_CancelSneakBenefit");
ProcObjectTimer(_Char,"AS_CancelSneakBenefit",2000);

IF
CharacterStatusRemoved(_Char,"INVISIBLE",_)
THEN
ProcObjectTimerCancel(_Char,"AS_CheckSneakAbuse");
ProcObjectTimerCancel(_Char,"AS_CancelSneakBenefit");
ProcObjectTimer(_Char,"AS_CancelSneakBenefit",2000);

PROC
ProcObjectTimerFinished(_Char,"AS_CancelSneakBenefit")
AND
HasActiveStatus(_Char,"SNEAKING",0)
AND
HasActiveStatus(_Char,"INVISIBLE",0)
THEN
ObjectClearFlag(_Char,"AS_CanBenefitFromSneak");









IF
CharacterReceivedDamage(_Defender,_,(CHARACTERGUID)_Attacker)
AND
CharacterHasTalent(_Attacker,"SurpriseAttack",1)
AND
ObjectGetFlag(_Attacker,"AS_CanBenefitFromSneak",1)
THEN
ApplyStatus(_Defender,"DISARMED",6.0,1);
PlayEffect(_Defender,"RS3_FX_Skills_Voodoo_Impact_Attack_Precision_01");
ObjectClearFlag(_Attacker,"AS_CanBenefitFromSneak");
//CharacterStatusText(_Attacker,"Got 'em!");


EXITSECTION

ENDEXITSECTION
